{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "saturnus",
    "scopeName": "source.saturnus",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#string"
        },
        {
            "include": "#support"
        },
        {
            "include": "#type"
        },
        {
            "include": "#unsorted"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#storage"
        }
    ],
    "repository": {
        "constant": {
            "patterns": [
                {
                    "comment": "Floating point literal (fraction)",
                    "name": "constant.numeric.float.saturnus",
                    "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
                },
                {
                    "comment": "Floating point literal (exponent)",
                    "name": "constant.numeric.float.saturnus",
                    "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b"
                },
                {
                    "comment": "Floating point literal (typed)",
                    "name": "constant.numeric.float.saturnus",
                    "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b"
                },
                {
                    "comment": "Integer literal (decimal)",
                    "name": "constant.numeric.integer.decimal.saturnus",
                    "match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (hexadecimal)",
                    "name": "constant.numeric.integer.hexadecimal.saturnus",
                    "match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (octal)",
                    "name": "constant.numeric.integer.octal.saturnus",
                    "match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (binary)",
                    "name": "constant.numeric.integer.binary.saturnus",
                    "match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "name": "constant.language.boolean.saturnus",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "variable.language.self.saturnus",
                    "match": "\\b(self)\\b"
                },
                {
                    "name": "keyword.other.unsafe.saturnus",
                    "match": "\\b(unsafe)\\b"
                },
                {
                    "name": "keyword.control.saturnus",
                    "match": "\\b(break|continue|else|if|in|for|loop|match|return|while)\\b"
                },
                {
                    "name": "keyword.other.saturnus",
                    "match": "\\b(ref|use|super|move)\\b"
                },
                {
                    "name": "keyword.other.where.saturnus",
                    "match": "\\b(where)\\b"
                },
                {
                    "name": "keyword.other.as.saturnus",
                    "match": "(\\b(as)\\b)"
                },
                {
                    "comment": "Reserved keyword",
                    "name": "invalid.deprecated.saturnus",
                    "match": "\\b(abstract|alignof|become|do|final|macro|offsetof|override|priv|proc|pure|sizeof|typeof|virtual|yield)\\b"
                }
            ]
        },
        "meta": {
            "patterns": [
                {
                    "name": "meta.attribute.saturnus",
                    "begin": "#\\!?\\[",
                    "end": "\\]"
                },
                {
                    "name": "meta.statement.if-let.saturnus",
                    "match": "(if) (let)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.saturnus"
                        },
                        "2": {
                            "name": "storage.type.saturnus"
                        }
                    }
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.type.saturnus",
                    "match": ":\\s+?(?=(&|bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result|String|Box|Vec|Path|PathBuf|HashMap))"
                },
                {
                    "name": "punctuation.terminator.saturnus",
                    "match": ";"
                },
                {
                    "name": "punctuation.other.comma.saturnus",
                    "match": ","
                },
                {
                    "name": "punctuation.other.paren.saturnus",
                    "match": "[)(]"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "constant.character.escape.saturnus",
                    "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                },
                {
                    "name": "constant.character.saturnus",
                    "match": "b?'([^'\\\\]|\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
                },
                {
                    "name": "string.quoted.single.saturnus",
                    "begin": "b?'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.saturnus",
                            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                        },
                        {
                            "name": "constant.other.placeholder.saturnus",
                            "match": "(\\{)([a-zA-Z0-9_?:$.*<>]+)?(\\})"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.raw.saturnus",
                    "begin": "b?r(#*)'",
                    "end": "'\\1"
                },
                {
                    "name": "string.quoted.double.saturnus",
                    "begin": "b?\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.saturnus",
                            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                        },
                        {
                            "name": "constant.other.placeholder.saturnus",
                            "match": "(\\{)([a-zA-Z0-9_?:$.*<>]+)?(\\})"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.raw.saturnus",
                    "begin": "b?r(#*)\"",
                    "end": "\"\\1"
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "begin": "(\\:\\:{)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.path.saturnus"
                        }
                    },
                    "end": "}(;)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.path.saturnus"
                        },
                        "2": {
                            "name": "punctuation.terminator.saturnus"
                        }
                    },
                    "patterns": [
                        {
                            "name": "punctuation.other.comma.saturnus",
                            "match": ","
                        },
                        {
                            "name": "entity.name.type.saturnus",
                            "match": "\\w+"
                        }
                    ]
                },
                {
                    "match": "^(extern) (crate) ([_A-Za-z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.external.saturnus"
                        },
                        "2": {
                            "name": "keyword.other.saturnus"
                        },
                        "3": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "\\b([A-Za-z][_A-Za-z0-9]+)\\b(?=<[_a-zA-Z']+>)",
                    "name": "entity.name.type.saturnus"
                },
                {
                    "match": "([A-Za-z][_A-Za-z0-9]+)(?=::)",
                    "name": "entity.name.type.mod.saturnus",
                    "captures": {
                        "2": {
                            "name": "keyword.operator.path.saturnus"
                        }
                    }
                },
                {
                    "match": "((?<=::))([a-zA-Z_]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.path.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "name": "storage.type.core.saturnus",
                    "match": "\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result)\\b"
                },
                {
                    "name": "entity.name.type.hashmap.saturnus",
                    "match": "HashMap"
                },
                {
                    "match": "(?<=->\\s)(\\w+)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "\\b(T|U)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.generic.saturnus"
                        }
                    }
                },
                {
                    "name": "support.type.marker.saturnus",
                    "match": "\\b(Copy|Send|Sized|Sync)\\b"
                },
                {
                    "name": "support.type.core.saturnus",
                    "match": "\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\b"
                },
                {
                    "name": "storage.class.std.saturnus",
                    "match": "\\b(Box|String|Vec|Path|PathBuf)\\b"
                },
                {
                    "name": "support.type.std.saturnus",
                    "match": "\\b(ToOwned|ToString|FromStr)\\b"
                },
                {
                    "name": "entity.name.type.param.saturnus",
                    "begin": "<(?![=<])",
                    "end": "(?<![-])>",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.type.saturnus"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.type.saturnus"
                        }
                    },
                    "patterns": [
                        {
                            "name": "entity.name.type.param.saturnus",
                            "begin": "<(?![=<])",
                            "end": "(?<![-])>",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.type.saturnus"
                                }
                            },
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.type.saturnus"
                                }
                            }
                        },
                        {
                            "name": "storage.modifier.lifetime.saturnus",
                            "match": "'([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                            "captures": {
                                "1": {
                                    "name": "entity.name.lifetime.saturnus"
                                }
                            }
                        },
                        {
                            "match": "&(')([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                            "captures": {
                                "1": {
                                    "name": "storage.modifier.lifetime.saturnus"
                                },
                                "2": {
                                    "name": "entity.name.lifetime.saturnus"
                                }
                            }
                        },
                        {
                            "name": "storage.type.saturnus",
                            "match": "impl"
                        },
                        {
                            "name": "punctuation.other.comma.saturnus",
                            "match": ","
                        },
                        {
                            "name": "variable.language.ignored.saturnus",
                            "match": "\\b(_)\\b"
                        }
                    ]
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "match": "(let) (mut) ([a-zA-Z_][a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "storage.modifier.mutable.saturnus"
                        },
                        "3": {
                            "name": "variable.other.mutable.saturnus"
                        }
                    }
                },
                {
                    "name": "variable.other.saturnus",
                    "match": "(?<!\\:\\s)([a-zA-Z_][a-zA-Z0-9_]*)\\s(?==)"
                },
                {
                    "match": "([a-zA-Z_][a-zA-Z0-9_]+)(?=[:] )",
                    "captures": {
                        "1": {
                            "name": "variable.other.saturnus"
                        }
                    }
                },
                {
                    "match": "(let) (mut) ([a-zA-Z_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "storage.modifier.mutable.saturnus"
                        },
                        "3": {
                            "name": "variable.other.mutable.saturnus"
                        }
                    }
                },
                {
                    "match": "(?<!\\:\\s)([a-zA-Z_]\\s)(?==)",
                    "captures": {
                        "1": {
                            "name": "variable.other.saturnus"
                        }
                    }
                },
                {
                    "match": "([a-zA-Z_]+)(?=[:] )",
                    "captures": {
                        "1": {
                            "name": "variable.other.saturnus"
                        }
                    }
                },
                {
                    "match": "(let|pub)\\s([a-zA-Z0-9_]+)(\\:\\s)([a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "variable.other.saturnus"
                        },
                        "3": {
                            "name": "punctuation.separator.type.saturnus"
                        },
                        "4": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "^\\s+(return\\s)?(?!self)([a-zA-Z0-9_]+)\\s+$",
                    "captures": {
                        "1": {
                            "name": "keyword.control.saturnus"
                        },
                        "2": {
                            "name": "variable.other.return-value.saturnus"
                        }
                    }
                },
                {
                    "match": "([|])(\\w+)([|])",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.saturnus"
                        },
                        "2": {
                            "name": "variable.other.map.saturnus"
                        },
                        "3": {
                            "name": "keyword.operator.saturnus"
                        }
                    }
                },
                {
                    "match": "(?<=&|\\*)(?!mut|self)([a-zA-Z_]+)",
                    "captures": {
                        "1": {
                            "name": "variable.other.ref.saturnus"
                        }
                    }
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.saturnus",
                    "begin": "/\\*[\\*!](?![\\*/])",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "begin": "(?x) (\\*\\b|\\b_)(?=\\S)                # Open\n  (?=\n    (\n      <[^>]*+>              # HTML tags\n      | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                        # Raw\n      | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+      # Escapes\n      | \\[\n      (\n          (?<square>          # Named group\n            [^\\[\\]\\\\]        # Match most chars\n            | \\\\.            # Escaped chars\n            | \\[ \\g<square>*+ \\]    # Nested brackets\n          )*+\n        \\]\n        (\n          (              # Reference Link\n            [ ]?          # Optional space\n            \\[[^\\]]*+\\]        # Ref name\n          )\n          | (              # Inline Link\n            \\(            # Opening paren\n              [ \\t]*+        # Optional whtiespace\n              <?(.*?)>?      # URL\n              [ \\t]*+        # Optional whtiespace\n              (          # Optional Title\n                (?<title>['\"])\n                (.*?)\n                \\k<title>\n              )?\n            \\)\n          )\n        )\n      )\n      | \\1\\1                # Must be bold closer\n      | (?!(?<=\\S)\\1).            # Everything besides\n                        # style closer\n    )++\n    (?<=\\S)(?=_\\b|\\*)\\1                # Close\n  )\n",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.italic.markdown"
                                }
                            },
                            "end": "(?<=\\S)(\\1)((?!\\1)|(?=\\1\\1))",
                            "name": "markup.italic.markdown"
                        },
                        {
                            "begin": "(?x)\n ((?<!\\w)\\*\\*\\b|\\b__)(?=\\S)                # Open\n (?=\n   (\n     <[^>]*+>              # HTML tags\n     | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                       # Raw\n     | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+      # Escapes\n     | \\[\n     (\n         (?<square>          # Named group\n           [^\\[\\]\\\\]        # Match most chars\n           | \\\\.            # Escaped chars\n           | \\[ \\g<square>*+ \\]    # Nested brackets\n         )*+\n       \\]\n       (\n         (              # Reference Link\n           [ ]?          # Optional space\n           \\[[^\\]]*+\\]        # Ref name\n         )\n         | (              # Inline Link\n           \\(            # Opening paren\n             [ \\t]*+        # Optional whitespace\n             <?(.*?)>?      # URL\n             [ \\t]*+        # Optional whitespace\n             (          # Optional Title\n               (?<title>['\"])\n               (.*?)\n               \\k<title>\n             )?\n           \\)\n         )\n       )\n     )\n     | (?!(?<=\\S)\\1).            # Everything besides\n                       # style closer\n   )++\n   (?<=\\S)(?=__\\b|\\*\\*)\\1                # Close\n )\n",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.bold.markdown"
                                }
                            },
                            "end": "(?<=\\S)(\\1)",
                            "name": "markup.bold.markdown"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.raw.markdown"
                                },
                                "3": {
                                    "name": "punctuation.definition.raw.markdown"
                                }
                            },
                            "match": "(`+)([^`]|(?!(?<!`)\\1(?!`))`)*+(\\1)",
                            "name": "markup.inline.raw.string.markdown"
                        },
                        {
                            "match": "(#{1})\\s*(?=[\\S[^#]])(.*?)\\s*(\\s+#+)?$\\n?",
                            "name": "heading.markdown",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.heading.markdown"
                                },
                                "2": {
                                    "name": "entity.name.section.markdown"
                                },
                                "3": {
                                    "name": "punctuation.definition.heading.markdown"
                                }
                            }
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "2": {
                                    "name": "string.other.link.title.markdown"
                                },
                                "4": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "5": {
                                    "name": "punctuation.definition.metadata.markdown"
                                },
                                "6": {
                                    "name": "punctuation.definition.link.markdown"
                                },
                                "7": {
                                    "name": "markup.underline.link.markdown"
                                },
                                "8": {
                                    "name": "punctuation.definition.link.markdown"
                                },
                                "9": {
                                    "name": "string.other.link.description.title.markdown"
                                },
                                "10": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "11": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "12": {
                                    "name": "string.other.link.description.title.markdown"
                                },
                                "13": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "14": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "15": {
                                    "name": "punctuation.definition.metadata.markdown"
                                }
                            },
                            "match": "(?x)\n  (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                # Match the link text.\n  (\\()            # Opening paren for url\n    (<?)(.*?)(>?)      # The url\n    [ \\t]*          # Optional whitespace\n    (?:\n        ((\\().+?(\\)))    # Match title in parens…\n      | ((\").+?(\"))    # or in quotes.\n    )?            # Title is optional\n    \\s*            # Optional whitespace\n  (\\))\n",
                            "name": "meta.link.inline.markdown"
                        }
                    ]
                },
                {
                    "name": "comment.block.saturnus",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "comment.line.documentation.saturnus",
                    "begin": "//[!/](?=[^/])",
                    "end": "$",
                    "patterns": [
                        {
                            "begin": "(?x) (\\*\\b|\\b_)(?=\\S)                # Open\n  (?=\n    (\n      <[^>]*+>              # HTML tags\n      | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                        # Raw\n      | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+      # Escapes\n      | \\[\n      (\n          (?<square>          # Named group\n            [^\\[\\]\\\\]        # Match most chars\n            | \\\\.            # Escaped chars\n            | \\[ \\g<square>*+ \\]    # Nested brackets\n          )*+\n        \\]\n        (\n          (              # Reference Link\n            [ ]?          # Optional space\n            \\[[^\\]]*+\\]        # Ref name\n          )\n          | (              # Inline Link\n            \\(            # Opening paren\n              [ \\t]*+        # Optional whtiespace\n              <?(.*?)>?      # URL\n              [ \\t]*+        # Optional whtiespace\n              (          # Optional Title\n                (?<title>['\"])\n                (.*?)\n                \\k<title>\n              )?\n            \\)\n          )\n        )\n      )\n      | \\1\\1                # Must be bold closer\n      | (?!(?<=\\S)\\1).            # Everything besides\n                        # style closer\n    )++\n    (?<=\\S)(?=_\\b|\\*)\\1                # Close\n  )\n",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.italic.markdown"
                                }
                            },
                            "end": "(?<=\\S)(\\1)((?!\\1)|(?=\\1\\1))",
                            "name": "markup.italic.markdown"
                        },
                        {
                            "begin": "(?x)\n ((?<!\\w)\\*\\*\\b|\\b__)(?=\\S)                # Open\n (?=\n   (\n     <[^>]*+>              # HTML tags\n     | (?<raw>`+)([^`]|(?!(?<!`)\\k<raw>(?!`))`)*+\\k<raw>\n                       # Raw\n     | \\\\[\\\\`*_{}\\[\\]()#.!+\\->]?+      # Escapes\n     | \\[\n     (\n         (?<square>          # Named group\n           [^\\[\\]\\\\]        # Match most chars\n           | \\\\.            # Escaped chars\n           | \\[ \\g<square>*+ \\]    # Nested brackets\n         )*+\n       \\]\n       (\n         (              # Reference Link\n           [ ]?          # Optional space\n           \\[[^\\]]*+\\]        # Ref name\n         )\n         | (              # Inline Link\n           \\(            # Opening paren\n             [ \\t]*+        # Optional whitespace\n             <?(.*?)>?      # URL\n             [ \\t]*+        # Optional whitespace\n             (          # Optional Title\n               (?<title>['\"])\n               (.*?)\n               \\k<title>\n             )?\n           \\)\n         )\n       )\n     )\n     | (?!(?<=\\S)\\1).            # Everything besides\n                       # style closer\n   )++\n   (?<=\\S)(?=__\\b|\\*\\*)\\1                # Close\n )\n",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.bold.markdown"
                                }
                            },
                            "end": "(?<=\\S)(\\1)",
                            "name": "markup.bold.markdown"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.raw.markdown"
                                },
                                "3": {
                                    "name": "punctuation.definition.raw.markdown"
                                }
                            },
                            "match": "(`+)([^`]|(?!(?<!`)\\1(?!`))`)*+(\\1)",
                            "name": "markup.inline.raw.string.markdown"
                        },
                        {
                            "match": "(#{1})\\s*(?=[\\S[^#]])(.*?)\\s*(\\s+#+)?$\\n?",
                            "name": "heading.markdown",
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.heading.markdown"
                                },
                                "2": {
                                    "name": "entity.name.section.markdown"
                                },
                                "3": {
                                    "name": "punctuation.definition.heading.markdown"
                                }
                            }
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "2": {
                                    "name": "string.other.link.title.markdown"
                                },
                                "4": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "5": {
                                    "name": "punctuation.definition.metadata.markdown"
                                },
                                "6": {
                                    "name": "punctuation.definition.link.markdown"
                                },
                                "7": {
                                    "name": "markup.underline.link.markdown"
                                },
                                "8": {
                                    "name": "punctuation.definition.link.markdown"
                                },
                                "9": {
                                    "name": "string.other.link.description.title.markdown"
                                },
                                "10": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "11": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "12": {
                                    "name": "string.other.link.description.title.markdown"
                                },
                                "13": {
                                    "name": "punctuation.definition.string.begin.markdown"
                                },
                                "14": {
                                    "name": "punctuation.definition.string.end.markdown"
                                },
                                "15": {
                                    "name": "punctuation.definition.metadata.markdown"
                                }
                            },
                            "match": "(?x)\n  (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                # Match the link text.\n  (\\()            # Opening paren for url\n    (<?)(.*?)(>?)      # The url\n    [ \\t]*          # Optional whitespace\n    (?:\n        ((\\().+?(\\)))    # Match title in parens…\n      | ((\").+?(\"))    # or in quotes.\n    )?            # Title is optional\n    \\s*            # Optional whitespace\n  (\\))\n",
                            "name": "meta.link.inline.markdown"
                        }
                    ]
                },
                {
                    "name": "comment.line.double-slash.saturnus",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "match": "(?<=fn )([a-zA-Z][a-zA-Z0-9_]+)",
                    "name": "entity.name.function.saturnus"
                },
                {
                    "match": "(?!Err|Ok|Some)([a-zA-Z][a-zA-Z0-9_]+)(?=[(])",
                    "name": "entity.name.function.saturnus"
                },
                {
                    "match": "(?!Err|Ok|Some)([a-zA-Z]+)(?=[(])",
                    "name": "entity.name.function.saturnus"
                },
                {
                    "match": "([a-zA-Z][a-zA-Z0-9_]+)(\\<)(T)(\\>)(?=[(])",
                    "name": "entity.name.function.saturnus",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.saturnus"
                        },
                        "2": {
                            "name": "punctuation.definition.type.saturnus"
                        },
                        "3": {
                            "name": "entity.name.type.generic.saturnus"
                        },
                        "4": {
                            "name": "punctuation.definition.type.saturnus"
                        }
                    }
                },
                {
                    "match": "(impl) ([a-zA-Z_][a-zA-Z0-9:_<>]+) (for) ([a-zA-Z_][a-zA-Z0-9_]+) \\{",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.implementation.saturnus"
                        },
                        "3": {
                            "name": "storage.modifier.saturnus"
                        },
                        "4": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "(impl) ([a-zA-Z_][a-zA-Z0-9:]+)(?!for) \\{",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "(?<=\\=) (?!loop)([a-zA-Z][_a-zA-Z0-9:]+)\\s(?=\\{)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "(^\\s+|(Ok)\\()(?!loop)([a-zA-Z][_a-zA-Z0-9:]+)\\s(?=\\{)",
                    "captures": {
                        "2": {
                            "name": "support.constant.core.saturnus"
                        },
                        "3": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "match": "(Err|Ok|Some|@\\w+)(?=[(])",
                    "name": "support.constant.core.saturnus"
                },
                {
                    "name": "storage.type.saturnus",
                    "match": "impl(?=<)"
                },
                {
                    "match": "(mod)\\s([a-zA-Z_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.module.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.module.saturnus"
                        }
                    }
                },
                {
                    "match": "\\b(enum|class|trait|union)\\s+([a-zA-Z_][a-zA-Z0-9_]+)",
                    "captures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                },
                {
                    "begin": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "end": ";",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.saturnus"
                        },
                        "2": {
                            "name": "entity.name.type.saturnus"
                        }
                    }
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "name": "keyword.operator.member-access.saturnus",
                    "match": "(\\.)(?=parse)"
                },
                {
                    "name": "keyword.operator.member-access.saturnus",
                    "match": "\\s(\\.)\\b"
                },
                {
                    "name": "keyword.operator.member-access.saturnus",
                    "match": "\\b(\\.)\\b"
                },
                {
                    "name": "keyword.operator.member-access.saturnus",
                    "match": "\\B(\\.)\\b"
                },
                {
                    "name": "keyword.operator.member-access.saturnus",
                    "match": "(\\.)(?=to_string)"
                },
                {
                    "name": "keyword.operator.range.saturnus",
                    "match": "(\\.\\.)"
                },
                {
                    "name": "keyword.operator.path.saturnus",
                    "match": "(\\:\\:)"
                },
                {
                    "name": "keyword.operator.return-type.saturnus",
                    "match": "(->)"
                },
                {
                    "name": "keyword.operator.match.saturnus",
                    "match": "(=>)"
                },
                {
                    "name": "variable.language.ignored.saturnus",
                    "match": "\\b(_)\\b"
                },
                {
                    "name": "keyword.operator.error-propagation.saturnus",
                    "match": "(?<=\\))(\\?)"
                },
                {
                    "name": "keyword.operator.glob.saturnus",
                    "match": "(?<=::)(\\*)(?=;)"
                },
                {
                    "name": "keyword.operator.sigil.saturnus",
                    "match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"']+)"
                },
                {
                    "name": "keyword.operator.assignment.saturnus",
                    "match": "(\\=)"
                },
                {
                    "name": "keyword.operator.assignment.saturnus",
                    "match": "\\b(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)\\b"
                },
                {
                    "name": "keyword.operator.arithmetic.saturnus",
                    "match": "(!|\\+|-|/|\\*|%|\\^|\\||<<|>>)"
                },
                {
                    "name": "keyword.operator.comparison.saturnus",
                    "match": "(&&|\\|\\||==|!=|<>|not|or|and|nand|nor|xor)"
                },
                {
                    "name": "keyword.operator.comparison.saturnus",
                    "match": "\\s(<|>)"
                },
                {
                    "name": "keyword.operator.comparison.saturnus",
                    "match": "\\B(<=|>=)\\B"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.modifier.external.saturnus",
                    "match": "\\b(extern)\\b"
                },
                {
                    "name": "storage.modifier.static.saturnus",
                    "match": "\\b(static)\\b"
                },
                {
                    "name": "storage.type.function.saturnus",
                    "match": "\\b(fn|operator)\\b"
                },
                {
                    "name": "storage.type.saturnus",
                    "match": "\\b(let)\\b"
                },
                {
                    "name": "storage.type.saturnus",
                    "match": "\\b(enum|class)\\b"
                },
                {
                    "name": "entity.name.lifetime.saturnus",
                    "match": "(?<=&)('[a-zA-Z_]+)(?!')"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "name": "support.function.builtin.saturnus",
                    "match": "\\b(macro_rules|compile_error|format_args|env|option_env|concat_idents|concat|line|column|file|stringify|include|include_str|include_bytes|module_path|cfg)!"
                },
                {
                    "name": "support.function.core.saturnus",
                    "match": "\\b(panic|assert|assert_eq|assert_ne|debug_assert|debug_assert_eq|debug_assert_ne|try|write|writeln|unreachable|unimplemented)!"
                },
                {
                    "name": "support.function.std.saturnus",
                    "match": "\\b(format|print|println|eprint|eprintln|select|vec)!"
                },
                {
                    "name": "support.function.log.saturnus",
                    "match": "\\b(log|error|warn|info|debug|trace|log_enabled)!"
                },
                {
                    "name": "support.constant.core.saturnus",
                    "match": "\\b(None|Ok|Err)\\b"
                },
                {
                    "name": "support.constant.core.saturnus",
                    "match": "\\b(Some)"
                }
            ]
        }
    }
}